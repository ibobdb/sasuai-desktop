/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedTransactionsRouteImport } from './routes/_authenticated/transactions'
import { Route as AuthenticatedSettingsRouteImport } from './routes/_authenticated/settings'
import { Route as AuthenticatedRewardsRouteImport } from './routes/_authenticated/rewards'
import { Route as AuthenticatedMemberRouteImport } from './routes/_authenticated/member'
import { Route as legalTermsRouteImport } from './routes/(legal)/terms'
import { Route as legalPrivacyRouteImport } from './routes/(legal)/privacy'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'

const errors503LazyRouteImport = createFileRoute('/(errors)/503')()
const errors500LazyRouteImport = createFileRoute('/(errors)/500')()
const errors404LazyRouteImport = createFileRoute('/(errors)/404')()
const errors403LazyRouteImport = createFileRoute('/(errors)/403')()
const errors401LazyRouteImport = createFileRoute('/(errors)/401')()
const authForgotPasswordLazyRouteImport = createFileRoute(
  '/(auth)/forgot-password',
)()

const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const errors503LazyRoute = errors503LazyRouteImport
  .update({
    id: '/(errors)/503',
    path: '/503',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/503.lazy').then((d) => d.Route))
const errors500LazyRoute = errors500LazyRouteImport
  .update({
    id: '/(errors)/500',
    path: '/500',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/500.lazy').then((d) => d.Route))
const errors404LazyRoute = errors404LazyRouteImport
  .update({
    id: '/(errors)/404',
    path: '/404',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/404.lazy').then((d) => d.Route))
const errors403LazyRoute = errors403LazyRouteImport
  .update({
    id: '/(errors)/403',
    path: '/403',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/403.lazy').then((d) => d.Route))
const errors401LazyRoute = errors401LazyRouteImport
  .update({
    id: '/(errors)/401',
    path: '/401',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/401.lazy').then((d) => d.Route))
const authForgotPasswordLazyRoute = authForgotPasswordLazyRouteImport
  .update({
    id: '/(auth)/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() =>
    import('./routes/(auth)/forgot-password.lazy').then((d) => d.Route),
  )
const AuthenticatedTransactionsRoute =
  AuthenticatedTransactionsRouteImport.update({
    id: '/transactions',
    path: '/transactions',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedSettingsRoute = AuthenticatedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedRewardsRoute = AuthenticatedRewardsRouteImport.update({
  id: '/rewards',
  path: '/rewards',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedMemberRoute = AuthenticatedMemberRouteImport.update({
  id: '/member',
  path: '/member',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const legalTermsRoute = legalTermsRouteImport.update({
  id: '/(legal)/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const legalPrivacyRoute = legalPrivacyRouteImport.update({
  id: '/(legal)/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/sign-in': typeof authSignInRoute
  '/privacy': typeof legalPrivacyRoute
  '/terms': typeof legalTermsRoute
  '/member': typeof AuthenticatedMemberRoute
  '/rewards': typeof AuthenticatedRewardsRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/transactions': typeof AuthenticatedTransactionsRoute
  '/forgot-password': typeof authForgotPasswordLazyRoute
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/500': typeof errors500LazyRoute
  '/503': typeof errors503LazyRoute
  '/': typeof AuthenticatedIndexRoute
}
export interface FileRoutesByTo {
  '/sign-in': typeof authSignInRoute
  '/privacy': typeof legalPrivacyRoute
  '/terms': typeof legalTermsRoute
  '/member': typeof AuthenticatedMemberRoute
  '/rewards': typeof AuthenticatedRewardsRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/transactions': typeof AuthenticatedTransactionsRoute
  '/forgot-password': typeof authForgotPasswordLazyRoute
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/500': typeof errors500LazyRoute
  '/503': typeof errors503LazyRoute
  '/': typeof AuthenticatedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/(auth)/sign-in': typeof authSignInRoute
  '/(legal)/privacy': typeof legalPrivacyRoute
  '/(legal)/terms': typeof legalTermsRoute
  '/_authenticated/member': typeof AuthenticatedMemberRoute
  '/_authenticated/rewards': typeof AuthenticatedRewardsRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRoute
  '/_authenticated/transactions': typeof AuthenticatedTransactionsRoute
  '/(auth)/forgot-password': typeof authForgotPasswordLazyRoute
  '/(errors)/401': typeof errors401LazyRoute
  '/(errors)/403': typeof errors403LazyRoute
  '/(errors)/404': typeof errors404LazyRoute
  '/(errors)/500': typeof errors500LazyRoute
  '/(errors)/503': typeof errors503LazyRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/sign-in'
    | '/privacy'
    | '/terms'
    | '/member'
    | '/rewards'
    | '/settings'
    | '/transactions'
    | '/forgot-password'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/sign-in'
    | '/privacy'
    | '/terms'
    | '/member'
    | '/rewards'
    | '/settings'
    | '/transactions'
    | '/forgot-password'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/(auth)/sign-in'
    | '/(legal)/privacy'
    | '/(legal)/terms'
    | '/_authenticated/member'
    | '/_authenticated/rewards'
    | '/_authenticated/settings'
    | '/_authenticated/transactions'
    | '/(auth)/forgot-password'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_authenticated/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  authSignInRoute: typeof authSignInRoute
  legalPrivacyRoute: typeof legalPrivacyRoute
  legalTermsRoute: typeof legalTermsRoute
  authForgotPasswordLazyRoute: typeof authForgotPasswordLazyRoute
  errors401LazyRoute: typeof errors401LazyRoute
  errors403LazyRoute: typeof errors403LazyRoute
  errors404LazyRoute: typeof errors404LazyRoute
  errors500LazyRoute: typeof errors500LazyRoute
  errors503LazyRoute: typeof errors503LazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/transactions': {
      id: '/_authenticated/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof AuthenticatedTransactionsRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/rewards': {
      id: '/_authenticated/rewards'
      path: '/rewards'
      fullPath: '/rewards'
      preLoaderRoute: typeof AuthenticatedRewardsRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/member': {
      id: '/_authenticated/member'
      path: '/member'
      fullPath: '/member'
      preLoaderRoute: typeof AuthenticatedMemberRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(legal)/terms': {
      id: '/(legal)/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof legalTermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(legal)/privacy': {
      id: '/(legal)/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof legalPrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedMemberRoute: typeof AuthenticatedMemberRoute
  AuthenticatedRewardsRoute: typeof AuthenticatedRewardsRoute
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRoute
  AuthenticatedTransactionsRoute: typeof AuthenticatedTransactionsRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedMemberRoute: AuthenticatedMemberRoute,
  AuthenticatedRewardsRoute: AuthenticatedRewardsRoute,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRoute,
  AuthenticatedTransactionsRoute: AuthenticatedTransactionsRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  authSignInRoute: authSignInRoute,
  legalPrivacyRoute: legalPrivacyRoute,
  legalTermsRoute: legalTermsRoute,
  authForgotPasswordLazyRoute: authForgotPasswordLazyRoute,
  errors401LazyRoute: errors401LazyRoute,
  errors403LazyRoute: errors403LazyRoute,
  errors404LazyRoute: errors404LazyRoute,
  errors500LazyRoute: errors500LazyRoute,
  errors503LazyRoute: errors503LazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
